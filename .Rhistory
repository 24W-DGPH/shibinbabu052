ggplot2, # data visualization
zoo, # extra date functions
as.Date, #date manipulation
as.POSIXct, #date manipulation
plotly,   #interactive plots
shiny   # shiny app
)
kidney_disease_dirty <- import("kidney_disease")
kidney_disease_dirty <- import("kidney_disease.csv")
View(kidney_disease_dirty)
View(kidney_disease_dirty)
skimr::skim(kidney_disease_dirty)
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%
rename(specific_gravity = sg
)
View(kidney_disease_clean)
View(kidney_disease_dirty)
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%
rename(specific_gravity = sg,
albumin = al
)
Kidney_Disease_ <- kidney_disease_dirty %>%
View(kidney_disease_clean)
Kidney_Disease_ <- kidney_disease_dirty %>%
Kidney_Disease <- kidney_disease_dirty %>%
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al
Pus cells = pc
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al,
Pus cells = pc,
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al,
Pus cells = pc,
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al,
Pus cells = pc,
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al,
Pus cells = pc,
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al,
Pus cells = pc,
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al,
Pus cells = pc,
kidney_disease_clean <- kidney_disease_dirty %>%
janitor::clean_names() %>%       # use to clean the raw data
rename(Specific_gravity = sg,
Albumin = al,
Pus_cells = pc,
Pus_cell_count = pcc    # renaming the data
)
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary based cleaning
group_by, # groups one or more variables
tidyverse, # data management and visualizations
styler, # source code formatting
lintr, # detects bad code pattern
skimr, # preview tibbles
ggplot2, # data visualization
zoo, # extra date functions
as.Date, #date manipulation
as.POSIXct #date manipulation
)
# import ------------------
heart_final <- import("heart.csv")
# clean data------
heart <- heart_final %>%
janitor::clean_names() %>%
rename(
cholesterol = chol
)
heart = relocate(heart, cp, .after = ca)
heart = relocate(heart, restecg, .after = exang)
heart %>%
select(where(is.numeric)) %>%
names()
# Data Visualization ----------
is.na(heart)
sum(is.na(heart))
mean(heart$age, na.rm = TRUE)
mean(heart$cholesterol, na.rm = TRUE)
ggplot(data = heart, mapping = aes(x =age, y = cholesterol))+
geom_point(color =  "blue")
ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 7,
color = "purple",
fill = "orange"
)
ggplot(data = heart, mapping = aes(x = thalach)) +
geom_bar(mapping = aes(fill = trestbps), color = "lightblue", na.rm = TRUE)
ggplot(data = heart,
mapping = aes(
x =age,
y = cholesterol,
color = thalach,
size = thalach))+
geom_point(
alpha = 0.5)
age_count_plot <- ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
View(heart)
View(heart_final)
View(heart)
age_count_plot <- ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
age_count_plot <- ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
ggplot(data = heart, mapping = aes(x = thalach)) +
geom_bar(mapping = aes(fill = trestbps), color = "lightblue", na.rm = TRUE)
ggplot(data = heart,
mapping = aes(
x =age,
y = cholesterol,
color = thalach,
size = thalach))+
geom_point(
alpha = 0.5)
ggplot(data = heart, mapping = aes(x =age, y = cholesterol))+
geom_point(color =  "blue")
ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 7,
color = "purple",
fill = "orange"
)
age_count_plot <- ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 7,
color = "purple",
fill = "orange"
)
ggplot(data = heart, mapping = aes(x = thalach)) +
geom_bar(mapping = aes(fill = trestbps), color = "lightblue", na.rm = TRUE)
ggplot(data = heart,
mapping = aes(
x =age,
y = cholesterol,
color = thalach,
size = thalach))+
geom_point(
alpha = 0.5)
ggplot(data = heart, mapping = aes(x =age, y = cholesterol))+
geom_point(color =  "blue")
View(heart)
age_count_plot %>% plotly::ggplotly()
age_count_plot <- ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
age_count_plot <- ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
ggplot(data = heart, mapping = aes(x = thalach)) +
geom_bar(mapping = aes(fill = trestbps), color = "lightblue", na.rm = TRUE)
ggplot(data = heart,
mapping = aes(
x =age,
y = cholesterol,
color = thalach,
size = thalach))+
geom_point(
alpha = 0.5)
age_count_plot <- ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
music_effect_plot <-
ggplot(data = heart,
mapping = aes(     #map aesthetics to column values
x =age,         #map x axis to age
y = cholesterol,         #map y axis to hours_per_day
color = music_effects,  #map color to music effects
size = 0.4))+
geom_point(                      #display data as points
alpha = 0.6)
music_effect_plot %>% plotly::ggplotly()
music_effect_plot <-
ggplot(data = heart,
mapping = aes(     #map aesthetics to column values
x =age,         #map x axis to age
y = cholesterol,         #map y axis to hours_per_day
color = restecg,  #map color to music effects
size = 0.4))+
geom_point(                      #display data as points
alpha = 0.6)
music_effect_plot %>% plotly::ggplotly()
restecg_plot <-
ggplot(data = heart,
mapping = aes(     #map aesthetics to column values
x =age,         #map x axis to age
y = cholesterol,         #map y axis to hours_per_day
color = restecg,  #map color to music effects
size = 0.4))+
geom_point(                      #display data as points
alpha = 0.3)
music_effect_plot %>% plotly::ggplotly()
restecg_plot <-
ggplot(data = heart,
mapping = aes(     #map aesthetics to column values
x =age,         #map x axis to age
y = cholesterol,         #map y axis to hours_per_day
color = restecg,  #map color to music effects
size = 0.4))+
geom_point(                      #display data as points
alpha = 0.5)
music_effect_plot %>% plotly::ggplotly()
View(music_effect_plot)
ggplot(data = heart, mapping = aes(x = age))+
geom_histogram(
binwidth = 5,
color = "pink",
fill = "black"
)
age_count_plot %>% plotly::ggplotly()
View(music_effect_plot)
restecg_plot <-
ggplot(data = heart,
mapping = aes(     #map aesthetics to column values
x =thalach,         #map x axis to age
y = exanch,         #map y axis to hours_per_day
color = age,  #map color to music effects
size = 0.4))+
geom_point(                      #display data as points
alpha = 0.5)
music_effect_plot %>% plotly::ggplotly()
source("~/.active-rstudio-document")
# Load necessary packages
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
age_count_plot %>% plotly::ggplotly()
runApp()
runApp()
runApp()
# Load necessary packages
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
# Load necessary packages
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
runApp()
runApp()
runApp()
# Load necessary packages
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
# Assuming 'heart_final_shibin' dataset is loaded previously in the code
source("heart_final_shibin.R")
library(shiny)
# UI definition
ui <- fluidPage(
titlePanel("Mental Health Panels"),
sidebarLayout(
sidebarPanel(
sliderInput("age", label = "Age", min = 0, max = 100, value = c(0, 100)),
sliderInput("hours_per_day", label = "Hours per day", min = 0, max = 12, value = c(0, 12))
),
mainPanel(
plotOutput("scatter1"),     # First static plot
plotlyOutput("interactive") # Interactive plot using ggplotly
)
)
)
# Server logic
server <- function(input, output) {
# First scatter plot: Age vs Hours per Day
scatter1 <- function(mental_health, age_filter, hours_filter) {
filtered_data <- mental_health %>%
filter(age >= age_filter[1] & age <= age_filter[2],
hours_per_day >= hours_filter[1] & hours_per_day <= hours_filter[2])
ggplot(data = filtered_data,
mapping = aes(x = age, y = hours_per_day, color = age, size = hours_per_day)) +
geom_point(alpha = 0.3) +
labs(title = "Age vs Hours per Day")
}
# Reactive function for the first scatter plot
scatter_filter1 <- reactive({
scatter1(mental_health, input$age, input$hours_per_day)
})
# Render the first scatter plot
output$scatter1 <- renderPlot({
scatter_filter1()
})
# Second interactive plot: Using ggplotly
output$interactive <- renderPlotly({
filtered_data <- mental_health %>%
filter(age >= input$age[1] & age <= input$age[2],
hours_per_day >= input$hours_per_day[1] & hours_per_day <= input$hours_per_day[2])
music_effect_plot <- ggplot(data = filtered_data,
mapping = aes(
x = age,
y = hours_per_day,
color = music_effects)) +
geom_point(alpha = 0.7) +
labs(title = "Interactive Music Effects Plot",
x = "Age",
y = "Hours per Day") +
theme_minimal()
ggplotly(music_effect_plot)
})
}
# Run the shiny app
shinyApp(ui = ui, server = server)
# Load necessary packages
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
# Assuming 'heart_final_shibin' dataset is loaded previously in the code
source("heart_final_shibin.R")
# Load necessary packages
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
# Assuming 'heart_final_shibin' dataset is loaded previously in the code
source("heart_final_shibin.R")
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
# Assuming 'heart_final_shibin' dataset is loaded previously in the code
source("heart_final_shibin.R")
library(shiny)
pacman::p_load(
rio,  # data import
here, # relative file pathway
janitor, # cleans data
lubridate, # working with dates
epikit, # age_categories() function
matchmaker, # dictionary-based cleaning
dplyr, # data management
ggplot2, # data visualization1
shiny   # shiny app
)
# Assuming 'heart_final_shibin' dataset is loaded previously in the code
source("heart_final_shibin.R")
library(shiny)
# UI definition
ui <- fluidPage(
titlePanel("Mental Health Panels"),
sidebarLayout(
sidebarPanel(
sliderInput("age", label = "Age", min = 0, max = 100, value = c(0, 100)),
sliderInput("hours_per_day", label = "Hours per day", min = 0, max = 12, value = c(0, 12))
),
mainPanel(
plotOutput("scatter1"),     # First static plot
plotlyOutput("interactive") # Interactive plot using ggplotly
)
)
)
# Server logic
server <- function(input, output) {
# First scatter plot: Age vs Hours per Day
scatter1 <- function(mental_health, age_filter, hours_filter) {
filtered_data <- mental_health %>%
filter(age >= age_filter[1] & age <= age_filter[2],
hours_per_day >= hours_filter[1] & hours_per_day <= hours_filter[2])
ggplot(data = filtered_data,
mapping = aes(x = age, y = hours_per_day, color = age, size = hours_per_day)) +
geom_point(alpha = 0.3) +
labs(title = "Age vs Hours per Day")
}
# Reactive function for the first scatter plot
scatter_filter1 <- reactive({
scatter1(mental_health, input$age, input$hours_per_day)
})
# Render the first scatter plot
output$scatter1 <- renderPlot({
scatter_filter1()
})
# Second interactive plot: Using ggplotly
output$interactive <- renderPlotly({
filtered_data <- mental_health %>%
filter(age >= input$age[1] & age <= input$age[2],
hours_per_day >= input$hours_per_day[1] & hours_per_day <= input$hours_per_day[2])
music_effect_plot <- ggplot(data = filtered_data,
mapping = aes(
x = age,
y = hours_per_day,
color = music_effects)) +
geom_point(alpha = 0.7) +
labs(title = "Interactive Music Effects Plot",
x = "Age",
y = "Hours per Day") +
theme_minimal()
ggplotly(music_effect_plot)
})
}
# Run the shiny app
shinyApp(ui = ui, server = server)
# UI definition
ui <- fluidPage(
titlePanel("Mental Health Panels"),
sidebarLayout(
sidebarPanel(
sliderInput("age", label = "Age", min = 0, max = 100, value = c(0, 100)),
sliderInput("hours_per_day", label = "Hours per day", min = 0, max = 12, value = c(0, 12))
),
mainPanel(
plotOutput("scatter1"),     # First static plot
plotlyOutput("interactive") # Interactive plot using ggplotly
)
)
)
runApp()
